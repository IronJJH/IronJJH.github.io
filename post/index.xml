<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on IronMan&#39;s Secret</title>
    <link>https://IronJJH.github.io/post/</link>
    <description>Recent content in Posts on IronMan&#39;s Secret</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 05 Oct 2021 08:45:45 +0800</lastBuildDate><atom:link href="https://IronJJH.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>first leetcode</title>
      <link>https://IronJJH.github.io/post/first_leetcode/</link>
      <pubDate>Tue, 05 Oct 2021 08:45:45 +0800</pubDate>
      
      <guid>https://IronJJH.github.io/post/first_leetcode/</guid>
      <description>题目
给定一个二叉树，检查它是否是镜像对称的。
例如，二叉树 [1,2,2,3,4,4,3] 是对称的。
1  / 2 2 / \ / 3 4 4 3
但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:
1  / 2 2 \ 3 3
进阶：
你可以运用递归和迭代两种方法解决这个问题吗？
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/symmetric-tree 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
/**
* Definition for a binary tree node.
* struct TreeNode {
* int val;
* TreeNode *left;
* TreeNode *right;
* TreeNode() : val(0), left(nullptr), right(nullptr) {}
* TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
* TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}</description>
    </item>
    
    <item>
      <title>sayhello</title>
      <link>https://IronJJH.github.io/post/test/</link>
      <pubDate>Mon, 04 Oct 2021 08:45:45 +0800</pubDate>
      
      <guid>https://IronJJH.github.io/post/test/</guid>
      <description>hello,iron</description>
    </item>
    
    <item>
      <title>WHO</title>
      <link>https://IronJJH.github.io/post/blog/</link>
      <pubDate>Mon, 04 Oct 2021 08:45:45 +0800</pubDate>
      
      <guid>https://IronJJH.github.io/post/blog/</guid>
      <description>Welcome to ironman&amp;rsquo;s world!!</description>
    </item>
    
    <item>
      <title>排序算法学习笔记</title>
      <link>https://IronJJH.github.io/post/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://IronJJH.github.io/post/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>一、冒泡排序
冒泡排序（Bubble Sort）一种交换排序，它的基本思想是：两两比较相邻记录的关键字，如果反序则交换，直到没有反序的记录为止。
三种不同的冒泡实现
1.不算是标准的冒泡排序算法，不满足“两两交换相邻记录”的冒泡排序思想
思路：让每一个关键字，都和它后面的每一个关键字比较，如果大则交换，这样第一位置的关键字在一次循环后一定变成最小值。
![image-20220112094345821](/Users/ironman/Library/Application Support/typora-user-images/image-20220112094345821.png)
缺陷：在排序好1和2的位置后，对其余关键字的排序没有什么帮助（数字3反而还被换到了最后一位）。
2.正宗的冒泡排序算法
思路：每一次都从最后一个位置开始往前两两比较，前一个大于后一个则交换，第一次会把最小的关键字交换到第一个位置，第二次把第二小的关键字交换到第二个位置，，，如此往复。排序完成。
![image-20220112094516045](/Users/ironman/Library/Application Support/typora-user-images/image-20220112094516045.png)
缺陷：如果待排序的序列是{2,1,3,4,5,6,7,8,9}，那么除了第一和第二的关键字需要交换外，别的都已经是正常的顺序。当i=1时，交换了2和1，此时序列已经有序，但是算法却还会继续执行i=2到9以及每个循环中的j循环
3.优化后的冒泡排序
思路：增加一个标记变量flag，记录一趟下来是否有交换发生
#define MAXSIZE 10  typedef struct{ int r[MAXSIZE+1]; int length; }SqList; void swap(SqList *L,int i,int j){ int temp=L-&amp;gt;r[i]; L-&amp;gt;r[i]=L-&amp;gt;r[j]; L-&amp;gt;r[j]=temp; } //三种冒泡排序 //简单冒泡排序 void BubbleSort0(SqList *L){ for(int i=1;i&amp;lt;L-&amp;gt;length-1;i++){ for(int j=i+1;j&amp;lt;=L-&amp;gt;length;j++){ if(L-&amp;gt;r[i]&amp;gt;L-&amp;gt;r[j]) swap(L,i,j); } } } //正宗冒泡排序 void BubbleSort(SqList *L){ for(int i=1;i&amp;lt;L-&amp;gt;length;i++){ for(int j=L-&amp;gt;length-1;j&amp;gt;i;j--){ if(L-&amp;gt;r[j+1]&amp;lt;L-&amp;gt;r[j]) swap(L,j,j+1); } } } //优化冒泡排序 void BubbleSort1(SqList *L){ static bool flag=true; for(int i=1;i&amp;lt;L-&amp;gt;length&amp;amp;&amp;amp;flag;i++){ flag=false; for(int j=L-&amp;gt;length-1;j&amp;gt;i;j--){ if(L-&amp;gt;r[j+1]&amp;lt;L-&amp;gt;r[j]) swap(L,j,j+1); flag=true; } } } 二、选择排序</description>
    </item>
    
  </channel>
</rss>
